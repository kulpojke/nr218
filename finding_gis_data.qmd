# Finding, Acquiring, Creating, and Editing GIS Data  

[as well as]{style="display: block; text-align: center; font-size: 0.8em;"}  

::: {.r-fit-text style="font-size: 2em;"}
Introduction to Spectral Indices
:::

## Finding GIS Data {.smaller}
+ There is an enormous volume of freely available GIS data online.
+ Some places to look:
  + [NASA](https://neo.gsfc.nasa.gov/) 
  + [OpenStreetMap](https://www.openstreetmap.org/)
  + [USGS](https://earthexplorer.usgs.gov/)
    + [LiDAR Explorer](https://www.usgs.gov/tools/lidarexplorer) 
  + [ESA](https://browser.dataspace.copernicus.eu/) 
  + [LPDAAC](https://lpdaac.usgs.gov/product_search/) 
  + [Elevation data](https://dwtkns.com/srtm30m/) 
  + [Species observations](https://www.inaturalist.org/)
  + [ESRI OpenData](http://opendata.arcgis.com/)


## Tutorial - Copernicus Browser

+ Open [Copernicus Browser](https://browser.dataspace.copernicus.eu/) (right click to open in new tab)
+ First, make an account!

  ::: {style="font-size:0.7em"}
  + registration is free and helps track use of the tool (and manage processing quotas)
  ::: 

## {.smaller}

You should see something like this when it first opens:

::: {.figure style="fig-align: center; fig-width: 80%;"}
![](img/copernicus_home.png)
:::

To register, click the "Login" button at the top of the left panel

Follow the steps to register, confirm your email, and then go back to the main page.


## 

[Now let's get a feel for what the tool can do!](https://www.youtube.com/watch?v=F0lIn5r6ZWk)


##

Look at the [Garnet Fire ](https://www.fire.ca.gov/incidents/2025/8/24/garnet-fire) on CalFire inciweb.

::: {.r-stack}

::: {.fragment  .absolute .fade-out data-fragment-index="1"}
+ In Copernicus Browser (in visualize mode), paste the lat, lon into the search, hit enter
:::

::: {.fragment .absolute .fade-in-then-out data-fragment-index="1"}
+ Change the date to 2025-09-07
:::

::: {.fragment .absolute .fade-in-then-out data-fragment-index="2"}
+ Adjust image so the fire is in view
:::

::: {.fragment .absolute .fade-in-then-out data-fragment-index="3"}
![](img/2025-09-07-00_00_2025-09-07-23_59_Sentinel-2_L2A_custom.jpg)
:::

::: {.fragment .absolute .fade-in-then-out data-fragment-index="4"}
+ Lets try a different visualization
+ Copernicus offers a SWIR based composite visualization that is quite good for burn detection. 
:::

::: {.fragment .absolute .fade-in-then-out data-fragment-index="5"}
![](img/copernicus_SWIR.jpg)
:::

:::

##

![](img/swir_lapse.gif){.r-stretch}


##

+ That is a nice way to visualize but for actual detection purposed using a spectral index is better
+ Normalized Burn Ratio (NBR) is the most obvious choice here.
$$
\begin{align}
NBR &= \frac{NIR - SWIR2}{NIR + SWIR2} \\
    &= \frac{B8 - B12}{B8 + B12}  \mathrm{For Sentinel 2}
\end{align}
$$

__Exercise__ - Create and download a NBR geotiff fro before and after the fire.


## Spectral Indices

| Index | Formula | Bands (Sentinel-2) | Purpose |
|-------|---------|-------------------|---------|
| NDVI | (NIR - Red) / (NIR + Red) | (B8 - B4) / (B8 + B4) | Vegetation health/density |
| NDWI | (Green - NIR) / (Green + NIR) | (B3 - B8) / (B3 + B8) | Water bodies detection |
| NDMI | (NIR - SWIR1) / (NIR + SWIR1) | (B8 - B11) / (B8 + B11) | Vegetation moisture |
| NBR | (NIR - SWIR2) / (NIR + SWIR2) | (B8 - B12) / (B8 + B12) | Burn severity/scars |
| NDSI | (Green - SWIR1) / (Green + SWIR1) | (B3 - B11) / (B3 + B11) | Snow cover |
| NDBI | (SWIR1 - NIR) / (SWIR1 + NIR) | (B11 - B8) / (B11 + B8) | Built-up areas/urban |
| EVI | 2.5 × (NIR - Red) / (NIR + 6×Red - 7.5×Blue + 1) | 2.5 × (B8 - B4) / (B8 + 6×B4 - 7.5×B2 + 1) | Enhanced vegetation (reduces saturation) |
| SAVI | 1.5 × (NIR - Red) / (NIR + Red + 0.5) | 1.5 × (B8 - B4) / (B8 + B4 + 0.5) | Vegetation with soil correction |

See [Montero, D., Aybar, C., Mahecha, M.D. et al. A standardized catalogue of spectral indices to advance the use of remote sensing in Earth system research. Sci Data 10, 197 (2023). https://doi.org/10.1038/s41597-023-02096-0](https://doi.org/10.1038/s41597-023-02096-0) 


## Tutorial - Google Earth Engine

Another incredibly powerful tool at our disposal is Google Earth Engine

+ Cloud-based, so it can handle higher intensity data processing
+ Free* access to a large collection of datasets

  ::: {style = "font-size:0.7em"}
  + *Free for academic use, so let's take advantage of it!
  :::

## Step One - Registering for GEE

::: {style="font-size:0.6em"}
+ To connect your Google account, go to [https://code.earthengine.google.com/](https://code.earthengine.google.com/)
+ Once you've logged in, you should see something like this:

![](img/welcomeGEE.png){width=60%}

+ We want to **register a new project**
:::

##

::: {.columns}

::: {.column-width = "50%"}

+ Name your project something useful, then hit **create**
+ Next, we want to register the project for **non-commercial use**

:::

::: {.column-width = "50%"}

![](img/noncommercial.png){width=60%}

:::

:::

##

This will take you to a form where you can confirm your eligibility. Here's an example of how to fill it out:

::: {.columns}

::: {.column width="50%"}
![](img/GEE_form1.png)
:::

::: {.column width="50%"}
![](img/GEE_form2.png)
:::

:::

##

Now let's go back to the **Code Editor.**

##

These are the main panels to be aware of:

![](img/code_editor_edited.png)

## Step Two - Editing and Running a Script

::: {style="font-size:0.6em"}

+ In the scripts panel, select **New > File** and name it something useful
+ You should see it show up under the **Owner** dropdown:

:::

![](img/example_file_GEE.png)

::: {style="font-size:0.6em"}

+ Click on the file to open it, and then move to the Code Editor. It should be blank to start.

:::

##

+ Let's try running some code! In the editor window, type the following command:

![](img/hello_world.png)

+ Then hit **run.** Look at the console - what do you see?

##

Now let's try something a little more complicated:

```{.ojs}
// Note - lines that start like this (//) are comments, meaning they won't be run like regular code

// These are the 5 largest cities in the world: 
// Tokyo, Delhi, Shanghai, Mexico City, Sao Paulo

// Create a list named 'largeCities' with the names of all the above cities

var largeCities = ['Tokyo', 'Delhi', 'Shanghai', 'Mexico City', 'Sao Paulo']; 

// Print the list 

print(largeCities)
```

Copy the code above and paste it into your code editor, hit run, and explore the output in the console.

##

::: {.r-stack}

::: {.fragment .fade-out}

Next, we're going to explore some spatial data.

+ In the search bar at the top of page, type in "California Polytechnic State University"
+ Click on the search result, and the map view should update accordingly

:::

::: {.fragment .fade-in-then-out}

::: {style="font-size:0.6em"}

Add a marker to the map by clicking this icon:

:::

![](img/addmarker.png)

::: {style="font-size:0.6em"}

Place the point somewhere in the middle of campus:

:::

![](img/marker_on_map.png){width=60%}

:::

::: {.fragment .fade-in-then-out}

::: {style="font-size:0.6em"}

+ At the top of the code editor, you should now see a new **var** called "geometry", which gives us the coordinates of our point

:::

![](img/geometryvar.png)

::: {style="font-size:0.6em"}

+ We can now reference the point in new lines of code, like we did with "largeCities"

:::

:::

:::

##

::: {.r-stack}

::: {.fragment .fade-out}

+ To add in other data layers, let's look in the [Earth Engine Data Catalog](https://developers.google.com/earth-engine/datasets)
+ Using the search bar, find the **Sentinel-2 Dataset** and click on the Level-1C option

:::

::: {.fragment .fade-in-then-out}

+ Scroll down to the "Explore with Earth Engine" section, and copy the JavaScript code
+ Go back to the code editor, and paste the code onto a new line

:::

::: {.fragment .fade-in-then-out}

Before we run it, let's make a few changes to the code.

+ First, let's change these dates to be more recent:

![](img/dates.png)

+ Pick a month in 2025, and set the dates to be the first and end of the month

:::

::: {.fragment .fade-in-then-out}

::: {style="font-size:0.6em"}

+ Next, let's change the center point of the map to the point we dropped earlier:

:::

![](img/map_center.png)

::: {style="font-size:0.6em"}

+ Replace the entire line with the following code:

:::

```{.ojs}
Map.centerObject(geometry, 12);
```

::: {style="font-size:0.6em"}

+ Alternatively, you can just replace the first two numbers with the coordinate values saved to "geometry"

:::

:::

::: {.fragment .fade-in-then-out}

Hit run, and watch what happens in the map viewer! It may take a second for the layer to load.

:::

:::

## What is this code doing?

+ The quality of satellite imagery can be significantly affected by the cloud cover on any given day
+ To compensate for this, it can be helpful to generate a **composite image** of only the days with clear visibility over a month

##

+ From here, we could clip (or mask, in the case of raster images) the Sentinel image to a set boundary by uploading a shapefile or geojson
+ We can also export map layers, which will be saved to our Google Drive 

## Google Earth Engine QGIS Plugin

There is also a [GEE plugin for QGIS!](https://gee-community.github.io/qgis-earthengine-plugin/)

##

::: {style="font-size:0.8em"}

We can do the same operation we just did through the plugin:

:::

![](img/gee_plugin_example.png){width=80%}



















